
num a = 3 + 4.0 * 4 + 5/2%2*3
num b = 4-3
num c = a*b + a^2
num d = 3.2/2.2
num e = 4.2%3.2

bool f = false && 3<4.0
bool g = true || false
bool h = f != g
bool i = 2>3.5 ||5>=2 && 6 <= a
text myText = "yes"

list<num> myList = {5, 5, 10, 5*5, b}
dictionary<num, text> DictionaryWithoutValues
dictionary<num, text> DictionaryWithValues = { { 5, "fem" }, { 10, "ti" }, { 15, "femten" }, { 20, "tyve" } }

 func num myfunc(num t, text x, text tt, num ss) {
     t = 5
     num myNumber =  5 / 5 + 3
     x = "yeest"
     t--
     t++

     return myFunc(10)
 }

 strategy default {
    behavior onRun() {
        robot.fire(3)
        robot.ahead(10)
        robot.fire(3)
        robot.back(10)
    }
    behavior Boi() {
        num myBoiNum = 7+7
        text x = "yetty"
    }
 }

 event onLowHealth {
 	num health = 15
 	return health < 20
 }

num x = mything(2, "test")

func num mything(num x, text y) {
    return 5
}
 func void myLoops() {
    for (num x = 0; x < 10; x++) {
        robot.fire(3)
    }
    do {
        robot.fire(4)
    } while (x > 5)
    num y = 5
    while (y > 5) {
        robot.fire(5)
    }
 }

func void myTest(num x) {
    x = 5
    num value = testFunc("yes")
}

func num testFunc(text x) {
    return 5
}

 num x2 = myfunc(12, myText, "12", 5) + 5 * 2
 num x3 = robot.health() + 5


num x4 = 5 * 2 + myfunc(1, "as", myText, 4)
num ss = a + b + 5


num x5 = myFunc(5) + 5

func num myFunc(num x2) {
    x = 5 + 5

    return 5
}

event myEvent {
    num x = 5 + myFunc(120)

    while (x < 5) {
         x = 5 + 5
         num yy = myFunc(5)
         do {

         } while(x < 55)
    }

    return x
}

func void testLoop() {
    for (num i = 0; i < 5; i++) {
        num x = 55 ^ 2
    }
}

strategy defensive {
	behavior onRun() {
		robot.ahead(200)
		robot.fire(3)
		robot.back(200)
		robot.fire(3)
		robot.changeStrategy("offensive")
    }
}

dictionary<text, num> myDic = { {"as", 1}, {"asd", 2} }


func num test(ScannedRobotEvent e) {
    //list<num> myList = {0, 1, 2}

    dictionary<text, num> myDictionary = { {"yeet", 1}, {"yeety", 2}, {"yes", 3} }
    dictionary<num, num> myDictionaryz2z
    myDictionary.add("yes", 3)
    myDictionary.add("yes", 3)
    myDictionary.add("yes", 3)
    myDictionary.add("yes", 3)
    myDictionaryz2z.add(1,1)

    num y = 5
    for (num i = 0; i < 25; i++) {
        num x = 5
        x = 2
        for (num xx = 0; xx < 25; xx++) {
            num yess = 25
        }

        do {
            num yy = 25
            y = 2
        } while (y > 5)

        while (y < 25) {
            bool yy = true
            yy = false

            if (yy) {
                bool myx = true
                myx = false
            }
        }
    }

    bool yeet = true
    if (true) {
       num test = e.getBearing()
    } else if (false) {
       bool test = true
       test = false
    }

    return 5
}


func void test222(ScannedRobotEvent e) {
    list<num> myList = {0, 1, 2}
    bool y = true
    if (true && false && true && y) {
        bool xxxx = true
        if (xxxx) {
            if (xxxx) {
                num plsWork = 5
                myList.add(5)
            }
        }
    } else if (false ) {

    } else if (true) {

    } else {

    }
}

func num funcs2(num x, text t) {
    num xxx = robot.health()
    robot.fire(5)
    myList.add(1)
    myDic.add(" as", 1)
    testing(5, "yes", 5, 5, "yes", true)

    return 5
}

func void testing(num x, text y, num t, num t2, text y43, bool za) {

}

func void funcs(num x, num x2) {
    num x12 = 2 + 5
    //bool equal = x == x2
    bool notEqual = x != x2
    bool greater = x > x2
    bool greaterEqual = x >= x2
    bool less = x < x2
    bool lessEqual = x <= x2
    bool equal = true
    bool not = !equal
    funcs2(5, "")
    num xxx = funcs2(5, "")
}

strategy offensive {
    behavior onRun() {

    }
}
