
num a = 3 + 4.0 * 4 + 5/2%2*3
num b = 4-3
num c = a*b + a^2
num d = 3.2/2.2
num e = 4.2%3.2

num f = false && 3<4.0
num g = true || false
bool h= f != g
text i = 2>3.5 ||5>=2 && 6 <= a

list<num> myList = {5, 5, 10, 5*5, b}
dictionary<num, text> DictionaryWithoutValues
dictionary<num, text> DictionaryWithValues = { { 5, "fem" }, { 10, "ti" }, { 15, "femten" }, { 20, "tyve" } }

 func void myfunc(num t, text x, text tt, num ss) {
     t = 5
     num myNumber =  5 / 5 + 3
     x = "yeest"
     t--
     t++
 }

 strategy default {
    behavior onRun() {
        robot.fire(3)
        robot.forward(10)
        robot.fire(3)
        robot.backward(10)
    }
    behavior Boi() {
        num myBoiNum = 7+7
        text x = "yetty"
    }
 }

 event onLowHealth {
 	num health = 15
 	return health < 20
 }

 num x = mything(x, y)

func void mything(num x, text y) {

}
 func void myLoops() {
    for (num x = 0; x < 10; x++) {
        robot.fire(3)
    }
    do {
        robot.fire(4)
    } while (x)
    num y = true
    while (y) {
        robot.fire(5)
    }
 }

func void myTest(num x) {
    x = 5
    num value = testFunc(5)
    return value
}

func void testFunc(text x) {
    return x + 5
}

 num x2 = myfunc(12, x, 12, 5) + 5 * 2
 num x3 = robot.fire(3) + 5


num x4 = 5 * 2 + myfunc(1, 2, 3, 4)
num ss = a + b + 5


num x5 = myFunc(5) + 5

func void myFunc(num x2) {
    x = 5 + 5
    num y = funcs() + 5
}

event myEvent {
    num x = 5 + funcs()

    while (x < 5) {
         x = 5 + 5
         num yy = myFunc(5)
         do {

         } while(x < 55)
    }

    return x
}

func void funcs() {
    for (num i = 0; i < 5; i++) {
        num x = 55 ^ 2
    }
}

strategy defensive {
	behavior onRun() {
		robot.forward(200)
		robot.fire(3)
		robot.backward(200)
		robot.fire(3)
    }
}
